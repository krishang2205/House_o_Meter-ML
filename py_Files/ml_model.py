# -*- coding: utf-8 -*-
"""ML_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G7E0zSQ-u9UPDoo4aGKHrTVbt2_Yg1Kh
"""

pip install category_encoders

import pandas as pd
data2=pd.read_csv('Cleaned_Bengaluru_House_Data.csv')
print(data2.shape)

data2.drop(columns=['price_per_sqft','availability'], inplace=True)

data2.head()

x=data2.drop(columns=['price'])
y=data2['price']

import warnings
warnings.filterwarnings('ignore')
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression,Lasso,Ridge
from sklearn.preprocessing import OneHotEncoder,StandardScaler
from category_encoders import BinaryEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score
from sklearn.model_selection import cross_val_score

"""**LinearRegression**"""

X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=0)

from category_encoders import TargetEncoder

column_transf = make_column_transformer(
    (TargetEncoder(), ['location']),
    (OneHotEncoder(sparse_output=False, handle_unknown='ignore'),['area_type']),remainder='passthrough')

scalar=StandardScaler()

lr=LinearRegression()

pipe=make_pipeline(column_transf,scalar,lr)

pipe.fit(X_train,y_train)

y_pridict_lr=pipe.predict(X_test)

r2 = r2_score(y_test, y_pridict_lr)
print("R² score:", r2)

cv_scores = cross_val_score(pipe, x, y, cv=5, scoring='r2')
print("Cross-validated R² scores for each fold:", cv_scores)
print("Average cross-validated R² score:", np.mean(cv_scores))

"""**LassoRegression**"""

lasso=Lasso()

pipe1=make_pipeline(column_transf,scalar,lasso)

pipe1.fit(X_train,y_train)

y_pridict_lasso=pipe1.predict(X_test)
r2 = r2_score(y_test, y_pridict_lasso)
print("R² score:", r2)

cv_scores = cross_val_score(pipe1, x, y, cv=10, scoring='r2')
print("Cross-validated R² scores for each fold:", cv_scores)
print("Average cross-validated R² score:", np.mean(cv_scores))

"""**RidgeRegression**"""

ridge = Ridge()

pipe2 = make_pipeline(column_transf, scalar, ridge)

pipe2.fit(X_train, y_train)

y_predict_ridge = pipe2.predict(X_test)
r2 = r2_score(y_test,y_predict_ridge)
print("R² score:", r2)

cv_scores = cross_val_score(pipe2, x, y, cv=10, scoring='r2')
print("Cross-validated R² scores for each fold:", cv_scores)
print("Average cross-validated R² score:", np.mean(cv_scores))

from xgboost import XGBRegressor
xgb = XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=40)

pipe3 = make_pipeline(column_transf, scalar, xgb)

pipe3.fit(X_train, y_train)

y_predict_xgb = pipe3.predict(X_test)
r2 = r2_score(y_test,y_predict_xgb)
print("R² score:", r2)

import pickle
pickle.dump(pipe3,open('XGB_Model.pkl','wb'))

import pickle
pickle.dump(pipe2,open('RidgeModel.pkl','wb'))