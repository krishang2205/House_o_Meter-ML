# -*- coding: utf-8 -*-
"""(EDA)For_Bengaluru_House_Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PT0JDWfV9f0AWeeGooW4_ZCCfSfVqTZJ

### Exploratory Data Analysis
"""

import warnings
warnings.filterwarnings('ignore')
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

import pandas as pd
data2=pd.read_csv('Cleaned_Bengaluru_House_Data.csv')

data2.shape

data2.info()

data2.head()

data2.describe()

#Check for missing data percentages.
missing_data = data2.isnull().mean() * 100
print(missing_data[missing_data > 0].sort_values(ascending=False))

# Select only the numerical columns
numerical_features = data2.select_dtypes(include=['int64', 'float64']).columns

# Print the numerical features
print("Numerical Features:")
print(numerical_features)
for feature in numerical_features:
    plt.figure(figsize=(10, 5))
    sns.histplot(data2[feature], bins=30, kde=True)
    plt.title(f'{feature} Distribution')
    plt.show()

for feature in numerical_features:
  plt.figure(figsize=(10, 5))
  sns.boxplot(x=data2[feature])
  plt.title(f'{feature} Boxplot')
  plt.show()

categorical_features = data2.select_dtypes(include=['object', 'category'])
print("categorical_features:",categorical_features.columns)
# Select only numerical columns
numerical_data = data2.select_dtypes(include=['int64', 'float64'])
print("Numerical_Features:\n", numerical_data.columns)

data2.groupby('area_type')['area_type'].agg('count')

# Count plot for the first feature
plt.figure(figsize=(8, 5))
sns.countplot(data=data2, x='area_type', palette='viridis')
plt.title('Count of Property Types')
plt.show()

# Count plot for the second feature
plt.figure(figsize=(8, 5))
sns.countplot(data=data2, x='availability', palette='viridis')
plt.title('Count of Availability Status')
plt.show()

"""**HeatMap**"""

plt.figure(figsize=(12, 8))
sns.heatmap(numerical_data.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

"""**Main Obesrvation**

Key predictors of price are total_sqft, size(BHK), and bath due to their stronger correlations.

price_per_sqft is largely influenced by price, which makes sense as itâ€™s derived from the total price and area.

balcony may not be very informative as it has weak correlations with other variables, so it might be considered for exclusion or treated as a secondary feature.
"""

import seaborn as sns
import matplotlib.pyplot as plt

# Generate the pairplot
pair_plot = sns.pairplot(data2)

# Set the title by accessing the Figure object of the pairplot
pair_plot.fig.suptitle('Pair Plot of Numerical Features', y=1.02)  # Adjust the y position for title spacing

# Show the plot
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(data=data2, x='total_sqft', y='price')
plt.title('Price vs. Square Footage')
plt.show()

"""obsevation:

linear grouth

as the total sqft inceraes price also increaes
"""

plt.figure(figsize=(10, 6))
sns.scatterplot(data=data2, x='price_per_sqft', y='price', palette='viridis')
plt.title('Price per Square Foot vs Price')
plt.show()

avg_price_per_size = data2.groupby('size(BHK)')['price'].mean()
plt.figure(figsize=(10, 7))
avg_price_per_size.plot(kind='bar', color='skyblue')
plt.title('Average Price per no_of_BHK')
plt.xlabel('no._of_BHK')
plt.ylabel('Average Price')
plt.xticks(rotation=0)
plt.show()

"""**As number of room increase price also increases.**

"""

avg_price_per_bath = data2.groupby('bath')['price'].mean()


plt.figure(figsize=(10, 7))
avg_price_per_bath.plot(kind='bar', color='skyblue')
plt.title('Average Price per no_of_bath')
plt.xlabel('no._of_Bath')
plt.ylabel('Average Price')
plt.xticks(rotation=0)
plt.show()

specific_sqft = 2000
filtered_data = data2[data2['total_sqft'] == specific_sqft]
avg_price_per_balcony = filtered_data.groupby('bath')['price'].mean()
plt.figure(figsize=(10, 7))
avg_price_per_balcony.plot(kind='bar', color='skyblue')
plt.title(f'Average Price per Number of Bath for {specific_sqft} Sqft')
plt.xlabel('Number of Balconies')
plt.ylabel('Average Price')
plt.xticks(rotation=0)
plt.show()

avg_price_per_bath = data2.groupby('balcony')['price'].mean()


plt.figure(figsize=(10, 7))
avg_price_per_bath.plot(kind='bar', color='skyblue')
plt.title('Average Price per no_of_balcony')
plt.xlabel('no._of_Bath')
plt.ylabel('Average Price')
plt.xticks(rotation=0)
plt.show()

# Define the specific square footage area you want to check
specific_sqft = 2000  # Replace with the desired square footage

# Filter the data to include only entries with the specified total_sqft
filtered_data = data2[data2['total_sqft'] == specific_sqft]

# Calculate the average price per number of balconies for the specified square footage
avg_price_per_balcony = filtered_data.groupby('balcony')['price'].mean()

# Plotting
plt.figure(figsize=(10, 7))
avg_price_per_balcony.plot(kind='bar', color='skyblue')
plt.title(f'Average Price per Number of Balconies for {specific_sqft} Sqft')
plt.xlabel('Number of Balconies')
plt.ylabel('Average Price')
plt.xticks(rotation=0)
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(data=data2, x='availability', y='price', palette='Set2')
plt.title('Price by Availability Status')
plt.show()

plt.figure(figsize=(8, 5))
sns.barplot(data=data2, x='area_type', y='price', estimator='mean', ci=None, palette='viridis')
plt.title('Average Price by Area Type')
plt.show()

specific_sqft = 1500


filtered_data = data2[data2['total_sqft'] == specific_sqft]


plt.figure(figsize=(8, 5))
sns.barplot(data=filtered_data, x='area_type', y='price', estimator='mean', ci=None, palette='viridis')
plt.title(f'Average Price by Area Type for {specific_sqft} Sqft')
plt.xlabel('Area Type')
plt.ylabel('Average Price')
plt.show()

plt.figure(figsize=(8, 5))
sns.barplot(data=data2, x='availability', y='price', estimator='mean', ci=None, palette='viridis')
plt.title('Average Price by Availability Status')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

top_locations = data2['location'].value_counts().nlargest(10).index


data2['location_group'] = data2['location'].where(data2['location'].isin(top_locations))


plt.figure(figsize=(12, 6))
sns.barplot(data=data2, x='location_group', y='price', estimator='mean', ci=None, palette='viridis')
plt.title('Average Price by Top 10 Locations and Other')
plt.xticks(rotation=45)
plt.ylabel('Average Price')
plt.xlabel('Location')
plt.show()

category_to_check = 'ther'

if category_to_check in data2['location'].values:
    print(f"{category_to_check} is present in the 'location' feature.")
else:
    print(f"{category_to_check} is not present in the 'location' feature.")

plt.figure(figsize=(10, 6))
sns.scatterplot(data=data2, x='total_sqft', y='price', hue='size(BHK)', palette='viridis', alpha=0.6)
plt.title('Price vs Total Square Footage by Number of Bedrooms (BHK)')
plt.xlabel('Total Square Footage')
plt.ylabel('Price')
plt.legend(title='Number of Bedrooms (BHK)')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

def plot_scatter_by_location(data, location):

    location_data = data2[data2.location == location]


    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=location_data, x='total_sqft', y='price', hue='size(BHK)', palette='viridis', alpha=0.6)

    plt.title(f'Price vs Total Square Footage by Number of Bedrooms (BHK) in {location}')
    plt.xlabel('Total Square Footage')
    plt.ylabel('Price')
    plt.legend(title='Number of Bedrooms (BHK)')
    plt.show()
plot_scatter_by_location(data2, "Whitefield")

import seaborn as sns
import matplotlib.pyplot as plt

# Create the scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data2, x='size(BHK)', y='price', alpha=0.6)
plt.title('Scatter Plot of Price vs. Number of Bedrooms (BHK)')
plt.xlabel('Number of Bedrooms (BHK)')
plt.ylabel('Price')
plt.grid(True)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Create the scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data2, x='total_sqft', y='bath', alpha=0.6)
plt.title('Scatter Plot of Price vs. Number of Bedrooms (BHK)')
plt.xlabel('Number of Bedrooms (BHK)')
plt.ylabel('Price')
plt.grid(True)
plt.show()

print(len(data2['area_type'].unique()))

# Count occurrences of each area type
area_type_counts = data2['area_type'].value_counts()
# Plotting the pie chart
plt.figure(figsize=(8, 8))
plt.pie(area_type_counts, labels=area_type_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Area Types')
plt.show()

# Count occurrences of each area type
area_type_counts = data2['availability'].value_counts()
# Plotting the pie chart
plt.figure(figsize=(8, 8))
plt.pie(area_type_counts, labels=area_type_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of availability')
plt.show()